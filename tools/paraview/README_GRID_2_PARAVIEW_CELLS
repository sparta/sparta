
** Important **

Refer first to the README file in this directory if you are unfamilair with
the basic SPARTA ParaView tools. This file contains a description of two more
advanced tools for processing large SPARTA grid output in parallel.

----------

When SPARTA grids contain a large amount of grid refinement concentrated in
small areas of the grid, the tool grid2paraview.py tends to run out of memory
because it depends on a static distribution of cells to processors in terms of
grid chunks defined at the top level of the grid. To overcome this memory issue,
two new ParaView tools were developed: 

sort_sparta_grid_file.py and grid2paraview_cells.py

The program sort_sparta_grid_file.py takes as input a SPARTA grid file and uses
the parallel bucket sort algorithm to sort the grid cells into the same number
of files as MPI ranks used to run the program.

% mpiexec -np 4 pvbatch -sym sort_sparta_grid_file.py data.grid

The program must be run using the ParaView pvbatch program with the -sym argument.
The above command line will produce 4 output files containing SPARTA grid dashed ids
of cells located in the same area of the grid. The output file names are based on
the name of the *.grid file used as input (data.grid in this case). The output files
will be named as shown below.

data_sort_bucket_rank_0.txt
data_sort_bucket_rank_1.txt
data_sort_bucket_rank_2.txt
data_sort_bucket_rank_3.txt

The program grid2paraview_cells.py takes similar inputs as the grid2paraview.py
program described in the README file, and produces the same ParaView VTU file output
and PVD file output.

% mpiexec -np 4 pvbatch -sym grid2paraview_cells.py grid.txt output \
  -rf flow_files.txt --float --variables id f_1[5] f_1[7]

The program must be run using the ParaView pvbatch program with the -sym argument.
The above command line will produce an output.pvd file and a directory name output/
containing the ParaView VTU file data. The grid.txt file must contain a read_grid
statement with the path to a SPARTA grid cell output file, and is otherwise the same
as the grid2paraview.py version. The option --float outputs float precision numbers
to the VTU files to save memory (default is double precision). The --variables option
limits the output arrays to the names given on the command line (default is all variable
names found in the flow files given by the -rf or -r options).

The grid2paraview_cells.py program will look for *_sort_bucket_rank_?.txt files
produced by the sort_sparta_grid_file.py program. The matching will depend on the number
of MPI ranks that grid2paraview_cells.py is run on and the name of the output directory
given to grid2paraview_cells.py. If matching files are found, these will be used as
input on each MPI rank. If no match is found, grid2paraview_cells.py will run
sort_sparta_grid_file.py to produce sorted output files for each rank. The programs
are decoupled in this way to allow faster grid2paraview_cells.py runs once a set
of sorted files has been generated by sort_sparta_grid_file.py.

There are two unit tests for grid2paraview_unit_test.py and parallel_bucket_sort_unit_test.py.
These tests can be run with the pvpython program as shown below.

% pvpython grid2paraview_unit_test.py
% pvpython parallel_bucket_sort_unit_test.py
